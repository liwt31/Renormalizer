{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "94f758b7-a33a-4e00-aee0-7ff1fa151691",
   "metadata": {},
   "source": [
    "# MPS and MPO"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2637f23a-4499-4cb2-bf3e-2dfeedd23a84",
   "metadata": {},
   "source": [
    "## Overview\n",
    "In this notebook we will introduce the construction and manipulation of MPS and MPO.\n",
    "We will rely on ``Op``, ``BasisSet`` and ``Model`` from the previous tutorial."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efbf38f8-2c0c-4ba9-8014-eb2a90d8d106",
   "metadata": {},
   "source": [
    "## The spin-boson model\n",
    "\n",
    "In this notebook we will consider the MPS and MPO based on a 1-mode spin-boson model.\n",
    "\n",
    "$$\n",
    "    \\hat H = \\epsilon \\hat \\sigma_z + \\Delta \\hat \\sigma_x + \\omega \\hat b^\\dagger \\hat b\n",
    "              + g \\sigma_z (\\hat b^\\dagger + \\hat b)\n",
    "$$\n",
    "\n",
    "The spin degree of freedom is labeled as a str ``\"spin\"`` and the boson degree of freedom is labeled as a str ``\"boson\"``.\n",
    "We consider $\\epsilon=0$, $\\Delta=1$, $\\omega=1$ and $g=0.5$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "000f1769-9728-46fd-85d5-0faf2e6b558e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T11:17:04.980975Z",
     "iopub.status.busy": "2025-03-29T11:17:04.980783Z",
     "iopub.status.idle": "2025-03-29T11:17:05.621901Z",
     "shell.execute_reply": "2025-03-29T11:17:05.621245Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-03-29 11:17:05,577[INFO] Use NumPy as backend\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-03-29 11:17:05,578[INFO] numpy random seed is 9012\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-03-29 11:17:05,578[INFO] random seed is 1092\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-03-29 11:17:05,587[INFO] Git Commit Hash: 73ee9ed4e86cb784bacea31d73168511dd5658bc\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-03-29 11:17:05,588[INFO] use 64 bits\n"
     ]
    }
   ],
   "source": [
    "from renormalizer import Op, BasisHalfSpin, BasisSHO, Model\n",
    "\n",
    "epsilon = 0\n",
    "delta = 1\n",
    "omega = 1\n",
    "g = 0.5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d96cf62-388b-4207-bdc0-c93543fbc9a1",
   "metadata": {},
   "source": [
    "First, construct all terms in the Hamiltonian in a ``list`` or ``OpSum``."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e70d2ec4-097c-4c41-a2b3-6ccfeb151509",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T11:17:05.624603Z",
     "iopub.status.busy": "2025-03-29T11:17:05.624160Z",
     "iopub.status.idle": "2025-03-29T11:17:05.632130Z",
     "shell.execute_reply": "2025-03-29T11:17:05.631450Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Op('sigma_z', ['spin'], 0.0),\n",
       " Op('sigma_x', ['spin'], 1.0),\n",
       " Op('b^\\\\dagger b', ['boson', 'boson'], 1.0),\n",
       " Op('sigma_z b^\\\\dagger+b', ['spin', 'boson'], 0.5)]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ham_terms = [\n",
    "    Op(\"sigma_z\", \"spin\", epsilon),\n",
    "    Op(\"sigma_x\", \"spin\", delta),\n",
    "    Op(r\"b^\\dagger b\", \"boson\", omega),\n",
    "    Op(\"sigma_z\", \"spin\", g) * Op(r\"b^\\dagger+b\", \"boson\"),\n",
    "]\n",
    "ham_terms"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "107c01ee-4543-4fbf-8d63-f25551fbb77c",
   "metadata": {},
   "source": [
    "Then, define the basis for the model. Note that the boson mode is described by simple harmonic oscillator eigenbasis (``BasisSHO``)\n",
    "and the number of basis is truncated to 8.\n",
    "This means that the maximum number of bosons for the mode is 8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d080f8e7-c745-42d3-93d9-3b471d066df4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T11:17:05.634395Z",
     "iopub.status.busy": "2025-03-29T11:17:05.634005Z",
     "iopub.status.idle": "2025-03-29T11:17:05.638692Z",
     "shell.execute_reply": "2025-03-29T11:17:05.638115Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[BasisHalfSpin(dof: spin, nbas: 2),\n",
       " BasisSHO(dof: boson, x0: 0.0, omega: 1, nbas: 8)]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "basis = [BasisHalfSpin(\"spin\"), BasisSHO(\"boson\", omega=omega, nbas=8)]\n",
    "basis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f067a68-e719-4e75-959c-1c51d0059278",
   "metadata": {},
   "source": [
    "Checkout some of the operators defined by the basis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8e9f83d8-f1eb-44d8-a203-2885776f98a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T11:17:05.640827Z",
     "iopub.status.busy": "2025-03-29T11:17:05.640424Z",
     "iopub.status.idle": "2025-03-29T11:17:05.645107Z",
     "shell.execute_reply": "2025-03-29T11:17:05.644557Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.,  0.],\n",
       "       [ 0., -1.]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "basis[0].op_mat(\"Z\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a35a1d74-9969-41d9-bc6e-90f2a5c49c3f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T11:17:05.647134Z",
     "iopub.status.busy": "2025-03-29T11:17:05.646755Z",
     "iopub.status.idle": "2025-03-29T11:17:05.651769Z",
     "shell.execute_reply": "2025-03-29T11:17:05.651085Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 1., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 2., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 3., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 4., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 5., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 6., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 7.]])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "basis[1].op_mat(r\"b^\\dagger b\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "209047b3-2989-4608-9b22-23a5ac712cac",
   "metadata": {},
   "source": [
    "Lastly, build our model with ``Model``"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4c37b017-d714-4577-91ac-6d703463dbde",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T11:17:05.653888Z",
     "iopub.status.busy": "2025-03-29T11:17:05.653529Z",
     "iopub.status.idle": "2025-03-29T11:17:05.656812Z",
     "shell.execute_reply": "2025-03-29T11:17:05.656068Z"
    }
   },
   "outputs": [],
   "source": [
    "model = Model(basis, ham_terms)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "520e2767-1425-4145-a569-11e43309a1ca",
   "metadata": {},
   "source": [
    "## Construct MPS\n",
    "\n",
    "The matrix product state data structure is implemented in the `Mps` class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6129edcc-c743-4aec-9e5f-f6ad0542d5ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T11:17:05.658951Z",
     "iopub.status.busy": "2025-03-29T11:17:05.658592Z",
     "iopub.status.idle": "2025-03-29T11:17:05.661538Z",
     "shell.execute_reply": "2025-03-29T11:17:05.660902Z"
    }
   },
   "outputs": [],
   "source": [
    "from renormalizer import Mps"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a95912b-1a1e-4e00-b896-7ba119c464d9",
   "metadata": {},
   "source": [
    "Most commonly, MPS is initialized by two ways. The first is random initialization, which is usually followed by ground state/excited state search by the DMRG algorithm.\n",
    "The second is Hartree product state, which is usually followed by time evolution."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5a70385-a8c0-4f99-8583-bc5bae1c7fc6",
   "metadata": {},
   "source": [
    "### Random Initialization\n",
    "\n",
    "`Mps.random` requires the input of a `model`. Additionally, the user must also specify the targeted total quantum number `qntot` and the maximum bond dimension `m_max`.\n",
    "\n",
    "Since the spin-boson model does not conserve any quantum number, all states/operators are considered to have quantum number 0 in Renormalizer.\n",
    "Thus, the total quantum number is set to 0.\n",
    "\n",
    "The maximum bond dimension is set to 2 since a Schmidt decomposition for the 1-mode spin-boson model yields only 2 singular values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7e3be2dd-0fa1-487f-b259-127570077707",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T11:17:05.664003Z",
     "iopub.status.busy": "2025-03-29T11:17:05.663503Z",
     "iopub.status.idle": "2025-03-29T11:17:05.669195Z",
     "shell.execute_reply": "2025-03-29T11:17:05.668568Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<class 'renormalizer.mps.mps.Mps'> with 2 sites"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mps = Mps.random(model, qntot=0, m_max=2)\n",
    "mps"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c54cb58-5973-4548-acfb-24b6d972706d",
   "metadata": {},
   "source": [
    "The individual local matrices for the MPS can be accessed via simple indexing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2be63c8e-264a-4ab8-8ef6-29dcb73398f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T11:17:05.671237Z",
     "iopub.status.busy": "2025-03-29T11:17:05.671024Z",
     "iopub.status.idle": "2025-03-29T11:17:05.675476Z",
     "shell.execute_reply": "2025-03-29T11:17:05.674885Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<Matrix at 0x7f21c13af190 (1, 2, 2) float64>,\n",
       " <Matrix at 0x7f21c13af8b0 (2, 8, 1) float64>)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mps[0], mps[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66cc2b51-3977-47f1-abf0-8b971e118cb0",
   "metadata": {},
   "source": [
    "``Matrix`` can be considered as a wrapper for `np.ndarray` with more metadata. The indices of the array are left virtual index, the physical index and the right virtual index. The underlaying matrix can be accessed via the `array` attribute."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e490a69b-caeb-40ee-b39e-4fd85dd3d874",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T11:17:05.677439Z",
     "iopub.status.busy": "2025-03-29T11:17:05.677248Z",
     "iopub.status.idle": "2025-03-29T11:17:05.682041Z",
     "shell.execute_reply": "2025-03-29T11:17:05.681484Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([[[-0.3001646 ,  0.95388742],\n",
       "         [-0.95388742, -0.3001646 ]]]),\n",
       " array([[[-0.23065497],\n",
       "         [-0.17095648],\n",
       "         [-0.20932737],\n",
       "         [ 0.38826049],\n",
       "         [-0.3012568 ],\n",
       "         [ 0.32790434],\n",
       "         [ 0.18585373],\n",
       "         [ 0.23358931]],\n",
       " \n",
       "        [[ 0.48087768],\n",
       "         [ 0.23516332],\n",
       "         [-0.04290759],\n",
       "         [-0.02592754],\n",
       "         [ 0.20426241],\n",
       "         [-0.08392375],\n",
       "         [-0.03647715],\n",
       "         [ 0.31059649]]]))"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mps[0].array, mps[1].array"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6d6b6b0-fa3c-40c5-b4a6-34d60e992ad0",
   "metadata": {},
   "source": [
    "Conceptually, `Mps` can be considered as a sparse representation for a wavefunction/vector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7f09a5f0-ad14-4c20-b1c2-a28d1408cb4c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T11:17:05.684136Z",
     "iopub.status.busy": "2025-03-29T11:17:05.683748Z",
     "iopub.status.idle": "2025-03-29T11:17:05.688186Z",
     "shell.execute_reply": "2025-03-29T11:17:05.687623Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.52793762,  0.27563442,  0.02190365, -0.14127401,  0.28526997,\n",
       "       -0.17847908, -0.09058181,  0.22615884,  0.07567642,  0.09248553,\n",
       "        0.21255409, -0.36257427,  0.22605273, -0.28759289, -0.16633439,\n",
       "       -0.31604798])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mps.todense()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccdf3d10-fae2-4fed-9612-cf6228fed87f",
   "metadata": {},
   "source": [
    "`Mps` has a lot of utilities to calculate the properties of the wavefunction. For more of them, please refer to the API reference."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1a3a9e52-2fd7-4300-ad6c-91e5616526dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T11:17:05.690260Z",
     "iopub.status.busy": "2025-03-29T11:17:05.689881Z",
     "iopub.status.idle": "2025-03-29T11:17:05.694419Z",
     "shell.execute_reply": "2025-03-29T11:17:05.693780Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mps.norm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "66d833b6-867b-4d1e-9881-f99dc4e44a39",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T11:17:05.696630Z",
     "iopub.status.busy": "2025-03-29T11:17:05.696264Z",
     "iopub.status.idle": "2025-03-29T11:17:05.702336Z",
     "shell.execute_reply": "2025-03-29T11:17:05.701788Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: array([[0.5477172 , 0.18072785],\n",
       "        [0.18072785, 0.4522828 ]]),\n",
       " 1: array([[ 0.28444506,  0.15251675,  0.0276491 , -0.10202219,  0.16771161,\n",
       "         -0.11598982, -0.06040914,  0.09548038],\n",
       "        [ 0.15251675,  0.08452791,  0.02569558, -0.07247285,  0.09953683,\n",
       "         -0.07579316, -0.04035099,  0.03310729],\n",
       "        [ 0.0276491 ,  0.02569558,  0.04565901, -0.08016106,  0.05429689,\n",
       "         -0.06503839, -0.03733913, -0.06222358],\n",
       "        [-0.10202219, -0.07247285, -0.08016106,  0.15141845, -0.12226214,\n",
       "          0.12948824,  0.07310542,  0.0826405 ],\n",
       "        [ 0.16771161,  0.09953683,  0.05429689, -0.12226214,  0.13247879,\n",
       "         -0.11592588, -0.06344061, -0.00692718],\n",
       "        [-0.11598982, -0.07579316, -0.06503839,  0.12948824, -0.11592588,\n",
       "          0.11456445,  0.06400354,  0.05052853],\n",
       "        [-0.06040914, -0.04035099, -0.03733913,  0.07310542, -0.06344061,\n",
       "          0.06400354,  0.03587219,  0.03208377],\n",
       "        [ 0.09548038,  0.03310729, -0.06222358,  0.0826405 , -0.00692718,\n",
       "          0.05052853,  0.03208377,  0.15103415]])}"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mps.calc_1site_rdm()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ede0eb7f-c86a-4632-a05a-071329724c3c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T11:17:05.704504Z",
     "iopub.status.busy": "2025-03-29T11:17:05.704121Z",
     "iopub.status.idle": "2025-03-29T11:17:05.708202Z",
     "shell.execute_reply": "2025-03-29T11:17:05.707657Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 1]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# virtual bond dimension\n",
    "mps.bond_dims"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "be6cd3cf-ad6f-4005-b000-aaf53d12f002",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T11:17:05.710302Z",
     "iopub.status.busy": "2025-03-29T11:17:05.709937Z",
     "iopub.status.idle": "2025-03-29T11:17:05.714148Z",
     "shell.execute_reply": "2025-03-29T11:17:05.713473Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[2, 8]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# physical bond dimension\n",
    "mps.pbond_dims"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98da9efe-63f0-4f3d-b227-ae94ee279dde",
   "metadata": {},
   "source": [
    "### Hartree product state\n",
    "`Mps.hartree_product_state` also requires the input of a `model`. The state of each degrees of freedom can be specified through the `condition` argument.\n",
    "The degrees of freedom that are not specified through `condition` will be set to the ground state, i.e., $[1, 0, 0, \\dots, 0]$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1b50631f-ea77-4e7b-b793-9cda4b69cf82",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T11:17:05.716259Z",
     "iopub.status.busy": "2025-03-29T11:17:05.716063Z",
     "iopub.status.idle": "2025-03-29T11:17:05.721229Z",
     "shell.execute_reply": "2025-03-29T11:17:05.720579Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<class 'renormalizer.mps.mps.Mps'> with 2 sites"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "mps2 = Mps.hartree_product_state(model, condition={\"spin\":[1/np.sqrt(2), 1/np.sqrt(2)]})\n",
    "mps2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e8ad3388-00cf-4bc8-a43e-42c1ce96dae0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T11:17:05.723251Z",
     "iopub.status.busy": "2025-03-29T11:17:05.722902Z",
     "iopub.status.idle": "2025-03-29T11:17:05.727448Z",
     "shell.execute_reply": "2025-03-29T11:17:05.726790Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([[[0.70710678],\n",
       "         [0.70710678]]]),\n",
       " array([[[1.],\n",
       "         [0.],\n",
       "         [0.],\n",
       "         [0.],\n",
       "         [0.],\n",
       "         [0.],\n",
       "         [0.],\n",
       "         [0.]]]))"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mps2[0].array, mps2[1].array"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18254a0d-fdcd-4e74-bd2b-0787a96de5ef",
   "metadata": {},
   "source": [
    "## Construct MPO\n",
    "As described in the previous section, Renormalizer is able to exactly construct the most compact MPO exactly. By feeding the model into `Mpo`, the Hamiltonian is constructed as MPO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "5f3629dc-e1c1-4613-b40f-0fe977acfec6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T11:17:05.729355Z",
     "iopub.status.busy": "2025-03-29T11:17:05.729174Z",
     "iopub.status.idle": "2025-03-29T11:17:05.739420Z",
     "shell.execute_reply": "2025-03-29T11:17:05.738887Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-03-29 11:17:05,730[DEBUG] # of operator terms: 3\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-03-29 11:17:05,731[DEBUG] Input operator terms: 3\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-03-29 11:17:05,732[DEBUG] After combination of the same terms: 3\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-03-29 11:17:05,733[DEBUG] symbolic mpo algorithm: qr\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(<Matrix at 0x7f21a1677190 (1, 2, 2, 3) float64>,\n",
       " <Matrix at 0x7f21a1677160 (3, 8, 8, 1) float64>)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from renormalizer import Mpo\n",
    "mpo = Mpo(model)\n",
    "\n",
    "mpo[0], mpo[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6299933b-309a-4fe6-b0bd-845a01c2ddaa",
   "metadata": {},
   "source": [
    "Here the logging outputs that there are 3 terms in the Hamiltonian, since $\\hat \\sigma_z$ with coefficient 0 is dropped automatically.\n",
    "\n",
    "Similar to MPS, it is sometimes conceptionally convenient to consider MPO as a sparse representation of quantum operator/matrix.\n",
    "The interface of MPO is also similar to MPS."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0e44bee9-c5bb-46a0-b867-f07a683b5e79",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T11:17:05.741557Z",
     "iopub.status.busy": "2025-03-29T11:17:05.741339Z",
     "iopub.status.idle": "2025-03-29T11:17:05.745573Z",
     "shell.execute_reply": "2025-03-29T11:17:05.744928Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(16, 16)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# converting to dense operator/matrix\n",
    "mpo.todense().shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "675ed473-fa49-49b5-a9d3-cdde91027162",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T11:17:05.747636Z",
     "iopub.status.busy": "2025-03-29T11:17:05.747233Z",
     "iopub.status.idle": "2025-03-29T11:17:05.751412Z",
     "shell.execute_reply": "2025-03-29T11:17:05.750852Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 3, 1]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# virtual bond dimension\n",
    "mpo.bond_dims"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c1b5d7b-f680-4270-93f4-4984a4deff77",
   "metadata": {},
   "source": [
    "Operators other than the Hamiltonian can be constructed by providing the corresponding `Op` or `OpSum`.\n",
    "Note that `model` still has to be provided, since it contains the basis set information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "7a20aeeb-1ea0-4db6-bb49-19f03b653e42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T11:17:05.753559Z",
     "iopub.status.busy": "2025-03-29T11:17:05.753177Z",
     "iopub.status.idle": "2025-03-29T11:17:05.759219Z",
     "shell.execute_reply": "2025-03-29T11:17:05.758689Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-03-29 11:17:05,754[DEBUG] # of operator terms: 1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-03-29 11:17:05,754[DEBUG] Input operator terms: 1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-03-29 11:17:05,755[DEBUG] After combination of the same terms: 1\n"
     ]
    }
   ],
   "source": [
    "mpo2 = Mpo(model, Op(\"Z\", \"spin\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2967ee3-4e89-420e-9628-9742279ff4c9",
   "metadata": {},
   "source": [
    "## MPO/MPS manipulation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a790c093-b4d3-40b4-937b-f13eb888fc05",
   "metadata": {},
   "source": [
    "Two MPSs can be added together, resulting in another MPS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "82ce56dd-843a-46cb-a420-0c8a5012303f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T11:17:05.761290Z",
     "iopub.status.busy": "2025-03-29T11:17:05.760911Z",
     "iopub.status.idle": "2025-03-29T11:17:05.765375Z",
     "shell.execute_reply": "2025-03-29T11:17:05.764791Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<class 'renormalizer.mps.mps.Mps'> with 2 sites"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mps + mps2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c556e358-0921-42b0-bc75-7bc0a1427e9b",
   "metadata": {},
   "source": [
    "MPO can apply on MPS, resulting in another MPS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "792d6185-925d-44f7-8300-4dfdcef27805",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T11:17:05.767569Z",
     "iopub.status.busy": "2025-03-29T11:17:05.767193Z",
     "iopub.status.idle": "2025-03-29T11:17:05.771928Z",
     "shell.execute_reply": "2025-03-29T11:17:05.771353Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<class 'renormalizer.mps.mps.Mps'> with 2 sites"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mpo @ mps"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e34c5c43-4d8c-4610-99db-91b952f9e389",
   "metadata": {},
   "source": [
    "This is equivalent to `mpo.apply(mps)`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "52309466-fec2-4945-a249-c64244985461",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T11:17:05.773849Z",
     "iopub.status.busy": "2025-03-29T11:17:05.773661Z",
     "iopub.status.idle": "2025-03-29T11:17:05.779928Z",
     "shell.execute_reply": "2025-03-29T11:17:05.779342Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mpo.apply(mps).distance(mpo @ mps)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c117094a-ef9b-4b87-90a7-ac9fbc313e93",
   "metadata": {},
   "source": [
    "Calculating expectation value between MPS and MPO $\\langle \\rm{MPS}|\\rm{MPO}|MPS\\rangle$ using the `expectation` function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "8de0fdd0-a468-4566-bda8-810aa51b431a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T11:17:05.782045Z",
     "iopub.status.busy": "2025-03-29T11:17:05.781654Z",
     "iopub.status.idle": "2025-03-29T11:17:05.786344Z",
     "shell.execute_reply": "2025-03-29T11:17:05.785687Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.4581250957501104"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mps.expectation(mpo)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3925aaf8-63e9-471c-aa1d-de2b964b2ade",
   "metadata": {},
   "source": [
    "Calculating transition amplitudes $\\langle \\rm{MPS2}|\\rm{MPO}|MPS\\rangle$ is also straight-forward"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "818eb440-a754-48dc-85c2-5d3b02846569",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-29T11:17:05.788565Z",
     "iopub.status.busy": "2025-03-29T11:17:05.788247Z",
     "iopub.status.idle": "2025-03-29T11:17:05.792783Z",
     "shell.execute_reply": "2025-03-29T11:17:05.792225Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4915724950374597"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mps.expectation(mpo, self_conj=mps2)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
